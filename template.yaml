Transform: AWS::Serverless-2016-10-31
Description: Infrastructure for AWS MediaLive Channel Orchestrator

Globals:
  Function:
    Runtime: python3.9
    Timeout: 5
    Environment:
      Variables:
        CHANNEL_TABLE: !Ref ChannelTable
        ALLOW_ORIGIN: !If
          - DefaultAccessControlOrigin
          - !Sub 'https://${CloudFrontDistribution.DomainName}'
          - !Ref AccessControlAllowOriginOverride

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: API Stage
  AccessLogsBucket:
    Type: String
    Default: ""
    Description: Optional bucket for access logs. Leave blank to disable access logging
  AccessControlAllowOriginOverride:
    Type: String
    Default: ""
    Description: Optional override for the CORS policy. Leave blank to scope CORS to the CloudFront distribution
  DefaultUserEmail:
    Type: String
    Default: ""
    Description: Optional email for the default admin user. Leave blank to skip creation
  CognitoAdvancedSecurity:
    Description: The type of Cognito advanced security to enable. Disabled by default.
    Type: String
    Default: "OFF"
    AllowedValues:
      - "OFF"
      - "AUDIT"
      - "ENFORCED"
  EnableBackups:
    Description: Whether to enable DynamoDB backups. Disabled by default.
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  AlertExpiry:
    Type: Number
    Default: "12"
    Description: The number of hours to retain cleared alert messages. Specify 0 to retain indefinitely

Conditions:
  WithAccessLogs: !Not [!Equals [!Ref AccessLogsBucket, ""]]
  DefaultAccessControlOrigin:
    !Equals [!Ref AccessControlAllowOriginOverride, ""]
  CreateUser: !Not [!Equals [!Ref DefaultUserEmail, ""]]

Resources:
  WebUIBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration: !If
        - WithAccessLogs
        - DestinationBucketName: !Ref AccessLogsBucket
          LogFilePrefix: !Ref AWS::StackName
        - !Ref AWS::NoValue

  WebUIBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebUIBucket
      PolicyDocument:
        Statement:
          - Sid: HttpsOnly
            Action: "*"
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${WebUIBucket}
              - !Sub arn:${AWS::Partition}:s3:::${WebUIBucket}/*
            Principal: "*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"
          - Sid: CloudFrontOriginOnly
            Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:s3:::${WebUIBucket}/*
            Principal:
              Service: "cloudfront.amazonaws.com"
            Condition:
              ArnEquals:
                aws:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-S3AccessControl'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebUIBucket.RegionalDomainName
            Id: S3Origin
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
            S3OriginConfig: {}
        Enabled: true
        HttpVersion: http2
        Comment: The UI distribution
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        Logging: !If
          - WithAccessLogs
          - Bucket: !Sub ${AccessLogsBucket}.s3.${AWS::URLSuffix}
            IncludeCookies: false
            Prefix: !Sub ${AWS::StackName}/
          - !Ref AWS::NoValue

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: "Your AWS MediaLive Channel Orchestrator username is {username} and the temporary password is {####}"
          EmailSubject: "Your temporary password for AWS MediaLive Channel Orchestrator"
      AutoVerifiedAttributes:
        - email
      UserPoolAddOns:
        AdvancedSecurityMode: !Ref CognitoAdvancedSecurity
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      SupportedIdentityProviders:
        - COGNITO

  CognitoUserPoolAdmin:
    Condition: CreateUser
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: admin
      DesiredDeliveryMediums:
        - EMAIL
      UserPoolId: !Ref UserPool
      UserAttributes:
        - Name: email
          Value: !Ref DefaultUserEmail
        - Name: email_verified
          Value: "True"

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
        AllowOrigin: !If
          - DefaultAccessControlOrigin
          - !Sub "'https://${CloudFrontDistribution.DomainName}'"
          - !Sub "'${AccessControlAllowOriginOverride}'"
      GatewayResponses:
        DEFAULT_4XX:
          ResponseTemplates:
            "application/json": '{ "Message": $context.error.messageString }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Origin: !If
                - DefaultAccessControlOrigin
                - !Sub "'https://${CloudFrontDistribution.DomainName}'"
                - !Sub "'${AccessControlAllowOriginOverride}'"
        DEFAULT_5XX:
          ResponseTemplates:
            "application/json": '{ "Message": $context.error.messageString }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Origin: !If
                - DefaultAccessControlOrigin
                - !Sub "'https://${CloudFrontDistribution.DomainName}'"
                - !Sub "'${AccessControlAllowOriginOverride}'"
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        DefaultAuthorizer: Cognito
        Authorizers:
          Cognito:
            UserPoolArn:
              Fn::GetAtt: [UserPool, Arn]

  ApiHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: infrastructure/lambda/api
      Handler: app.lambda_handler
      Architectures:
        - arm64
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:37
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChannelTable
        - Statement:
            - Sid: MediaLivePackage
              Effect: Allow
              Action:
                - medialive:List*
                - medialive:Describe*
                - medialive:StopChannel
                - medialive:StartChannel
                - medialive:BatchUpdateSchedule
                - mediapackage:List*
              Resource: "*"
      Events:
        AnyApi:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref ApiGatewayApi

  ChannelTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AttributeDefinitions:
        - AttributeName: "ChannelId"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ExpiresAt
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !Ref EnableBackups
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
      KeySchema:
        - AttributeName: "ChannelId"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"

  MediaLiveEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: infrastructure/lambda/events
      Handler: index.lambda_handler
      Architectures:
        - arm64
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:37
      Environment:
        Variables:
          ALERT_EXPIRY: !Ref AlertExpiry
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChannelTable
      Events:
        MediaLiveEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - "aws.medialive"


Outputs:
  CognitoUserPoolID:
    Description: The UserPool ID
    Value: !Ref UserPool
  CognitoWebClientID:
    Description: The web client ID
    Value: !Ref UserPoolClient
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
  Region:
    Description: Deployment region
    Value: !Ref AWS::Region
  WebUIBucket:
    Description: Web UI S3 Bucket
    Value: !Ref WebUIBucket
  WebUrl:
    Description: The web frontend URL
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
